allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    Properties properties = new Properties()
    properties.load(rootProject.file('local.properties').newDataInputStream())
    MOVIE_DB_API_KEY = properties.getProperty('MOVIE_DB_API_KEY')

    // Jetbrains
    kotlin_version = '1.4.20'

    // AndroidX
    gradle_version = '4.0.0'
    androidx_version = '1.1.0'
    recyclerview_version = '1.1.0'
    constraintlayout_version = '1.1.3'

    // Test
    junit_version = '4.12'

    // AndroidTest
    androidx_junit_version = '1.1.1'

    // Dagger
    daggerVersion = '2.24'

    // LifeCycle
    androidarch_lifecycle_version = '1.1.1'

    //Remote
    retrofitVersion = '2.6.3'
    loggingInterceptorVersion = '4.2.1'

    //Coroutines
    coroutinesVersion = '1.1.0'
    coroutinesAdapterVersion = '0.9.2'

    //Glide
    glideVersion = '4.9.0'

    //Mockito
    mockitoKotlin = '2.2.0'
    mockitoInline = '2.28.2'
    coreTestingVersion = '2.0.0'
    mockwebserverVersion = "3.8.1"

    mockitoVersion = "2.25.0"


    versionNumbers = [
            compileSdkVersion: 29,
            buildToolsVersion: "29.0.2",
            minSdkVersion    : 24,
            targetSdkVersion : 29
    ]

    jetBrainsDependencies = [
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    ]

    classpathDependencies = [
            androidToolsBuild : "com.android.tools.build:gradle:${gradle_version}",
            kotlinGradlePlugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}",
            androidToolsBuild : "com.android.tools.build:gradle:${gradle_version}",
            kotlinGradlePlugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}",
    ]

    androidXDependencies = [
            appCompat       : "androidx.appcompat:appcompat:${androidx_version}",
            material        : "com.google.android.material:material:${androidx_version}",
            coreKtx         : "androidx.core:core-ktx:${androidx_version}",
            constraintlayout: "androidx.constraintlayout:constraintlayout:${constraintlayout_version}",
            recyclerview    : "androidx.recyclerview:recyclerview:${recyclerview_version}",
    ]


    testDependencies = [

            //testImplementation
            mockwebserver: "com.squareup.okhttp3:mockwebserver:$mockwebserverVersion",
            coreTesting  : "androidx.arch.core:core-testing:$coreTestingVersion",
            mockitoCore  : "org.mockito:mockito-core:$mockitoVersion",
            junit        : "junit:junit:${junit_version}",
            testShared   : project(':testShared')
    ]

    androidTestDependencies = [
            mockitoAndroid  : "org.mockito:mockito-android:$mockitoVersion"
    ]

    androidDependenciesFramework = [
            dagger: "com.google.dagger:dagger:${daggerVersion}",

    ]

    androidLifecycle = [
            androidLifecycle: "android.arch.lifecycle:extensions:$androidarch_lifecycle_version"
    ]

    androidKaptLibs = [
            daggerCompiler: "com.google.dagger:dagger-compiler:${daggerVersion}",
    ]

    retrofitDependencies = [
            retrofit             : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitConverterGson: "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    ]

    loggingInterceptorDependencies = [
            loggingInterceptor: "com.squareup.okhttp3:logging-interceptor:${loggingInterceptorVersion}",
    ]

    coroutinesDependencies = [
            coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesVersion}"
    ]

    coroutinesAdapterDependencies = [
            coroutines: "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${coroutinesAdapterVersion}"
    ]

    glideDependencies = [
            glide: "com.github.bumptech.glide:glide:${glideVersion}",
    ]

    glideCompilerDependencies = [
            glide: "com.github.bumptech.glide:compiler:${glideVersion}"
    ]
    testLibs = [
            mockitoKotlin: "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin",
            mockitoInline: "org.mockito:mockito-inline:$mockitoInline"
    ]
}